from typing import List
from collections import deque
class MonotonicQueue:
    def __init__(self):
        self.q = deque()
    def pushback(self,x):
        while len(self.q)>0 and self.q[-1]<x:
            self.q.pop()
        self.q.append(x)
    def pop(self):
        self.q.popleft()
    def max(self):
        return self.q[0]
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        win = MonotonicQueue()
        ans = []
        for i in range(len(nums)):
            win.pushback(nums[i])
            if (i-k+1 >=0):
               ans.append(win.max())
            if i-k+1>=0 and nums[i-k+1] == win.max():
                win.pop()
        return ans
             
A = Solution()
nums = [-1998,-3617,3451,5254,5328,97,-5747,-1950,8565,2152,3868,4538,6724,1762,9737,-6233,2938,9382,3475,275,8263,6559,2947,9365,9531,8010,600,-556,-2697,11,-8308,9972,-4054,-3867,-1540,8108,-5913,2587,1845,4745,4938,-3825,-1750,-567,-4569,-1532,5859,-1760,8542,744,5215,3095,2441,8790,1553,-1234,4028,77,8080,9294,-9789,515,6782,8983,-9754,1179,-2242,6149,-2578,-2933,-6045,1975,-296,-1099,7974,-1327,1319,-2596,-910,6510,5877,8869,2669,7637,-6795,-1922,7,-5030,3907,-6931,-8733,-8508,-5924,-3549,9719,-475,-3393,-7235,5471,6275,-5116,2025,9423,-1459,7201,-251,531,-497,-8909,-843,8668,7068,2243,-1528,-4057,-4279,-9779,-7798,-2176,5479,3381,458,2449,-546,6790,-7292,-8850,1221,9231,-4896,-9528,5395,9422,9638,-4961,466,2267,8277,-5641,-3533,-219,2673,-294,-250,-4343,6324,63,-1231,6061,5150,-6137,-6130,-5173,4177,-2697,-2707,9191,-3777,-4640,-594,8006,-6181,-3944,-7105,-7283,2912,-8891,888,7204,4426,-2149,-5407,-6158,-7231,-2130,-6935,-1308,-7685,-1511,-255,7975,-177,-4072,9256,-9706,2369,-2743,2299,4951,-8819,9837,-8454,-9249,231,-4921,-8054,9298,-3925,-4980,6062,3999,5134,-1199,-5936,-1012,7,888,5429,-6707,4650,6917,-6068,1860,-6939,6338,3586,-7833,-4571,-8511,9340,6480,1607,-2745,-7542,-8295,4197,2246,-5625,-7145,-6026,-5047,-6467,1799,4734,-2120,93,642,-935,8848,-913,3636,1176,4438,4550,-5186,1173,-8015,5799,-3790,8925,5111,-5608,-4770,-3820,-9742,8172,8383,-4651,-5194,5531,3181,4121,5785,1879,-1638,-6116,6363,-777,4926,7027,-6767,4893,7557,-52,-8871,-5570,-9886,9910,9264,2938,-294,7096,3376,-3515,-3668,2605,7229,-9270,-8876,-7280,-8899,3204,-3654,-4654,-2417,-4069,-8461,-1032,1841,-3352,-3892,2865,-6303,4384,9042,-2346,3978,6426,-1583,-838,9691,-5564,1204,9466,-9192,1803,7706,-714,2815,-491,2641,6030,5470,-4031,6199,-6875,3095,2813,-896,2509,-2796,7919,4679,-1638,-3197,-4149,9891,2691,-1777,-1244,-4370,-9466,7710,-8969,4060,4474,4180,-9866,-6667,1941,7357,2892,8495,-8943,6533,7937,6721,3072,202,3539,658,-4749,4369,6020,1040,-7441,-3159,8506,-2886,-4745,-9022,-9271,985,2883,4363,2582,-2358,7397,7930,2299,-397,-9328,-3135,107,-8084,8048,-9530,-9584,-4901,1825,4347,3825,1197,-6432,-8409,9301,-2128,4648,-1660,9782,-717,-9782,3231,840,3881,-6936,-5032,52,8611,5031,7811,-2695,674,2186,6890,-6323,5213,-2854,-2701,2057,4213,-1822,3779,-2942,-3242,-8870,9136,-7688,-3479,2617,-7681,-9350,7310,-221,-7223,-7902,2759,-7421,4144,6220,8081,-2925,8470,-813,4560,3799,7482,-2751,-8005,8812,6572,2436,9298,-33,3051,-7507,-9297,9821,-3269,-6812,5488,4067,-4495,7613,-9822,7548,-5667,6483,-8955,-8702,2827,8910,-2982,-3070,5293,8375,-6955,-1988,4314,8332,-8782,4229,-2245,-4400,5951,3081,9655,7374,-416,8553,4383,-4452,321,1114,4913,1587,-9712,-5008,-6296,3385,-9225,-7789,965,7295,-5992,6295,1460,-7280,-8282,-459,8273,-4412,5937,-3974,-1416,-2953,97,5197,7131,7660,-2473,3572,-5756,-6534,8504,-2331,-6496,-6247,2865,-7618,-1340,-2119,-1473,-9431,3562,-74,5977,-761,-8702,-6869,-9807,7568,6336,-4744,7702,8593,-2062,7684,-2358,5776,2815,5654,3853,7597,4414,4852,-4136,-3236,-4348,-1114,2882,-307,3480,366,3777,-7864,5826,6407,4225,1332,-1481,-9948,2978,-9722,9712,3410,9390,-6877,-3909,-7733,3182,-2402,2384,-2895,8485,4099,-8624,-9268,-1231,27,-7812,93,7218,-2166,-4255,-730,5105,4601,-7177,-7600,-6306,3368,3507,6338,342,-277,-7229,-8211,-9388,-6575,5576,8701,8059,-1827,-114,-8965,4915,-6961,-2164,-8575,4506,313,-3941,550,3892,-9156,-5216,-2476,410,5400,6302,-998,9084,-7913,-3361,-5570,3007,-2917,-6081,368,-1317,9282,6596,1948,7279,-6302,-6306,-1551,3026,3721,-4793,-6731,-3468,7050,8594,9831,5082,14,-2515,9028,2343,6833,4451,-8672,-7610,-3483,3464,8938,-7894,6591,8413,-7870,720,-6300,633,-9791,9028,-2713,8303,-7213,-4712,-5557,5262,7036,-1421,4133,-3344,-167,-3451,-603,-727,-4694,-8951,-9790,-4572,-9199,948,8023,6480,-2955,-3509,3099,7082,7514,7880,-9053,6341,-9400,-4941,-8305,-7934,6850,5795,-4475,9140,-449,4754,-7228,8628,21,2754,-7621,2150,-5284,-2465,9421,3948,-6244,-4242,5671,-9967,8656,-6212,6369,4631,-5801,-75,9028,8859,1096,9851,-8212,-796,1928,-357,-2273,6361,1449,-3692,-7662,-8728,2226,-4093,1940,-7818,9305,2114,5512,-3240,-5668,9430,120,-4619,6756,-1181,-4136,-8186,-5111,-4117,-9476,476,-2550,-8627,5016,3578,1695,-5131,-2297,-7958,-2206,9700,-4206,9745,-4690,-1671,5763,6935,-6802,-4952,-5902,-7509,5030,-9229,-3804,7302,5688,4080,3277,-3057,-4556,8953,9943,-9999,-6929,-7710,1065,-2657,-2826,-7588,-8721,3265,-5582,-1901,-8388,-9659,-6936,8535,-5247,-878,6537,-5950,9272,3281,-9500,-3441,-6440,-9779,-528,2758,6392,4994,7868,-7587,8305,-1275,7490,-3926,-8139,-5654,2515,6353,-1058,1539,7107,-2940,2193,-4216,4673,6788,-8411,-6094,-4520,6528,5301,9209,5460,5698,-6601,9522,-8280,4141,-2920,494,3541,-1250,9972,5518,2360,7508,-1982,4113,-7542,-104,-871,6125,3069,6115,9932,-496,-3148,7683,7080,-6221,4665,-7587,6854,-355,-625,1574,4488,7621,6773,2960,-8754,-3907,9929,7021,7090,52,-1677,-5323,8834,-1314,6195,-3429,6627,-3561,1763,-1509,5709,4371,-8180,986,-4268,-1668,-3943,-5935,7168,3544,-5108,1531,-8767,9792,529,8670,8498,4308,-3572,-3040,277,2722,-5836,1209,7989,-7414,9387,-1988,1225,-1114,-3690,602]
k = 828
print(A.maxSlidingWindow(nums,k))            