from typing import List
class Solution:
    def islandsize(self,n,m,grid):
        if grid[n][m] == "0":
            return 
        maxm = len(grid[0])
        maxn = len(grid)
        move = [(1,0),(0,1),(-1,0),(0,-1)]
        if grid[n][m] == "1":
            grid[n][m] = "0"
            for k in range(4):
                nx = n+ move[k][0]
                my = m+ move[k][1]
                if nx >= 0 and my >= 0 and nx <maxn and my < maxm and grid[nx][my] == "1":
                    self.islandsize(nx,my,grid)
        return                           
    def numIslands(self, grid: List[List[str]]) -> int:
        if len(grid) == 0 :
            return 0
        count = 0
        for n in range(len(grid)):
            for m in range(len(grid[0])):
                if grid[n][m] == "1":
                    count+= 1
                    self.islandsize(n,m,grid)            
        return count            
"""
from typing import List
from collections import deque
class Solution:
    def islandsize(self,d,grid):
        maxm = len(grid[0])
        maxn = len(grid)
        move = [(1,0),(0,1),(-1,0),(0,-1)]
        while len(d) != 0:
            (x,y) = d.popleft()
            for k in range(4):
                nx = x+ move[k][0]
                my = y+ move[k][1]
                if nx >= 0 and my >= 0 and nx <maxn and my < maxm and grid[nx][my] == "1":
                    d.append((nx,my))
                    grid[nx][my] = "0"                              
    def numIslands(self, grid: List[List[str]]) -> int:
        if len(grid) == 0 :
            return 0
        d = deque()
        count = 0
        for n in range(len(grid)):
            for m in range(len(grid[0])):
                if grid[n][m] == "1":
                    count+=1
                    d.append((n,m))
                    grid[n][m] = "0"
                    self.islandsize(d,grid)
        return count  
"""          
A = Solution()
a = [["1","1","1","1","0"],["1","1","0","1","0"],["1","1","0","0","0"],["0","0","0","0","0"]]
print(A.numIslands(a))
b = [["1","1","0","0","0"],["1","1","0","0","0"],["0","0","1","0","0"],["0","0","0","1","1"]]
print(A.numIslands(b))
c = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
     ["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
     ["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
     ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
     ["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
     ["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
     ["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
     ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
     ["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
     ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
     ["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
     ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
     ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
     ["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
     ["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],
     ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]
print(A.numIslands(c))
